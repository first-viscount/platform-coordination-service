"""Comprehensive service verification tests."""

import pytest
from fastapi.testclient import TestClient
from src.main import app
from src.core.config import settings

client = TestClient(app)


class TestServiceVerification:
    """Comprehensive tests to verify service functionality."""

    def test_service_initialization(self):
        """Verify the FastAPI app initializes correctly."""
        assert app.title == settings.app_name
        assert app.version == settings.app_version
        assert app.description == "Platform Coordination Service API"

    def test_cors_middleware_configured(self):
        """Verify CORS middleware is properly configured."""
        # Make a request with Origin header
        response = client.get(
            "/health",
            headers={"Origin": "http://localhost:3000"}
        )
        assert response.status_code == 200
        # Check for CORS headers
        assert "access-control-allow-origin" in response.headers

    def test_all_routes_registered(self):
        """Verify all expected routes are registered."""
        routes = [route.path for route in app.routes]
        expected_routes = [
            "/",
            "/health",
            "/openapi.json",  # Auto-generated by FastAPI
            "/docs",  # Auto-generated by FastAPI
            "/redoc"  # Auto-generated by FastAPI
        ]
        for route in expected_routes:
            assert route in routes, f"Route {route} not found in app routes"

    def test_api_documentation_available(self):
        """Verify API documentation endpoints work."""
        # Test OpenAPI schema
        response = client.get("/openapi.json")
        assert response.status_code == 200
        schema = response.json()
        assert schema["info"]["title"] == settings.app_name
        assert schema["info"]["version"] == settings.app_version

    def test_error_handling(self):
        """Verify proper error handling for non-existent routes."""
        response = client.get("/non-existent-endpoint")
        assert response.status_code == 404
        assert response.json()["detail"] == "Not Found"

    def test_method_not_allowed(self):
        """Verify proper handling of unsupported HTTP methods."""
        response = client.post("/health")  # Health only supports GET
        assert response.status_code == 405
        assert response.json()["detail"] == "Method Not Allowed"

    def test_request_validation(self):
        """Test that request validation works properly."""
        # This would test any endpoints with request body validation
        # Currently we don't have any, but this is where they'd be tested
        pass

    def test_response_headers(self):
        """Verify proper response headers are set."""
        response = client.get("/")
        assert "content-type" in response.headers
        assert response.headers["content-type"] == "application/json"


def test_full_service_verification():
    """Run a comprehensive verification of the service."""
    print("\n=== Service Verification Report ===\n")
    
    # 1. Check app configuration
    print("✓ App Configuration:")
    print(f"  - Name: {settings.app_name}")
    print(f"  - Version: {settings.app_version}")
    print(f"  - CORS Origins: {len(settings.cors_origins)} configured")
    
    # 2. Test all endpoints
    endpoints_to_test = [
        ("/", "Root endpoint"),
        ("/health", "Health check endpoint"),
        ("/openapi.json", "OpenAPI schema"),
    ]
    
    print("\n✓ Endpoint Tests:")
    for endpoint, description in endpoints_to_test:
        response = client.get(endpoint)
        status = "✓" if response.status_code == 200 else "✗"
        print(f"  {status} {description}: {response.status_code}")
    
    # 3. Verify middleware
    print("\n✓ Middleware Configuration:")
    middleware_count = len(app.user_middleware)
    print(f"  - Middleware layers: {middleware_count}")
    print(f"  - CORS enabled: Yes")
    
    # 4. Check route registration
    print("\n✓ Registered Routes:")
    for route in app.routes:
        if hasattr(route, "path"):
            methods = ", ".join(route.methods) if hasattr(route, "methods") else "N/A"
            print(f"  - {route.path} [{methods}]")
    
    print("\n=== All Verifications Passed ===\n")